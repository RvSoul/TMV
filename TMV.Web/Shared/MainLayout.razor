@inherits LayoutComponentBase
@inject NavigationManager Navigation
@using App = Furion.App
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;

<MApp>
    <CascadingValue Value="UserId">
        <MAppBar Elevation=0 App MaxHeight=60
            Class="@($"{(_pageTab == PageModes.PageTab ?"mx-6":"mx-6 rounded-b-4")}")">
            <Favorite />
            <MSpacer />
          
           
            <Login />
        </MAppBar>

        <Navigation />

        <MMain Class="fill-lighten-1" Style="padding-top:60px">
            @if (_pageTab == PageModes.PageTab)
            {
                <PageTabs>
                    @Body
                </PageTabs>
            }
            else
            {
                <div class="pa-6 max-width">
                    <Breadcrumb></Breadcrumb>
                    @Body
                </div>
            }
        </MMain>
        <Settings @bind-PageModel="_pageTab" @bind-Show=_showSetting />
   </CascadingValue>
</MApp>

@code {
    private bool _showSetting;
    private string? _pageTab;
    private bool forceRender { get; set; } = false;
    public string UserId { get; set; }
    [Inject]
    public IPopupService PopupService
    {
        get;
        set;
    }
    [Inject]
    ProtectedLocalStorage sessionStorage { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                await PopupService.ToastSuccessAsync($"欢迎{user.Identity.Name} 进入系统！！");
            }
            else
            {
                Navigation.NavigateTo($"{Navigation.BaseUri}pages/authentication/login-v2");
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender || forceRender)
        {
            forceRender = false;
            var usering = await sessionStorage.GetAsync<string>("identity");
            //var usering =  sessionStorage.GetItemAsync<string>("UserId");
            if (!usering.Success)
            {
                await PopupService.ToastErrorAsync($"登录已过期，请重新登录！！");
            }
            else
            {
                StateHasChanged();
            }
        }
    }
}